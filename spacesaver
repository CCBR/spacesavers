#!/usr/bin/env python
# -*- coding: UTF-8 -*-

"""Spacesaver: find old and redundant files to optimize diskspace
About:
    This is the main entry for spacesaver.
USAGE:
	$ spacesaver <list|optimize> [OPTIONS]
Example:
    $ spacesaver ls -h
    $ spacesaver df -h
    $ spacesaver optimize -h
"""

# Python standard library
from __future__ import print_function
from genericpath import isdir
from subprocess import CalledProcessError
import sys, os, subprocess, textwrap

# 3rd party imports from pypi
import argparse  # potential python3 3rd party package, added in python/3.5

# Local imports
from src.shells import bash
from src.utils import (initialize,
    err,
    exists,
    fatal,
    permissions,
    require)


__version__ = 'v1.0.0'


def ls(sub_args):
    """Recursively list information about files and directories
    @param sub_args <parser.parse_args() object>:
        Parsed arguments for run sub-command
    """

    return sub_args


def df(sub_args):
    """Report file system disk space usage
    @param sub_args <parser.parse_args() object>:
        Parsed arguments for run sub-command
    """

    return sub_args


def parsed_arguments():
    """Parses user-provided command-line arguments. Requires argparse and textwrap
    package. argparse was added to standard lib in python 3.5 and textwrap was added
    in python 3.5. To create custom help formatting for subparsers a docstring is
    used create the help message for required options. argparse does not support named
    subparser groups, which is normally what would be used to accomphish this reformatting.
    As so, the help message for require options must be suppressed. If a new required arg
    is added to a subparser, it must be added to the docstring and the usage statement
    also must be updated.
    """

    # Create a top-level parser
    parser = argparse.ArgumentParser(description = 'Spacesaver: optimize disk space usage')

    # Adding Verison information
    parser.add_argument('--version', action = 'version', version='%(prog)s {}'.format(__version__))

    # Create sub-command parser
    subparsers = parser.add_subparsers(help='List of available sub-commands')

    # Options for the "ls" sub-command
    # Grouped sub-parser arguments are currently not supported.
    # https://bugs.python.org/issue9341
    # Here is a work around to create more useful help message for named
    # options that are required! Please note: if a required arg is added the
    # description below should be updated (i.e. update usage and add new option)
    required_ls_options = textwrap.dedent("""\
        usage: spacesaver ls [-h] [-m] \\
                             DIRECTORY [DIRECTORY ...]

        List directory contents of one or more directories. 
        Recusively lists information about the files and 
        directories in a set of given paths.
        
        By default, potential duplicates will be reported 
        based on matching file sizes. The -m option can be
        provided to calculate an md5 checksum for any
        potential duplicates. Please note that symlinks 
        and hardlinks will NOT be reported as a potential 
        duplicates as these files do not take up any 
        appreciable diskspace.

        """)

    # Display example usage in epilog
    ls_epilog = textwrap.dedent("""\
        example:
          # List raw data directory contents
          $ spacesaver ls /data/CCBR/rawdata/ccbr123/

        version:
          {}
        """.format(__version__))

    # Supressing help message of required args to overcome no sub-parser named groups
    subparser_ls = subparsers.add_parser('ls',
        help = 'Recusively list directory contents',
        usage = argparse.SUPPRESS,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description = required_ls_options,
        epilog = ls_epilog
    )

    # Positional arguments
    subparser_ls.add_argument('DIRECTORY', 
        # Check if the file exists and if it is readable
        type = lambda file: permissions(parser, file, os.R_OK),
        nargs = '+',
        help = argparse.SUPPRESS
    )
    
    # Optional arguments
    subparser_ls.add_argument('-m', '--md5',
                                action = 'store_true',
                                required = False,
                                default = False,
                                help = 'calculates MD5s for potential duplicates')

    # Options for the "df" sub-command
    # Grouped sub-parser arguments are currently not supported by argparse.
    # https://bugs.python.org/issue9341
    # Here is a work around to create more useful help message for named
    # options that are required! Please note: if a required arg is added the
    # description below should be updated (i.e. update usage and add new option)
    required_df_options = textwrap.dedent("""\
        usage: spacesaver df [-h] \\
                             DIRECTORY [DIRECTORY ...]

        Reports disk space usage for one or more directories. 
        A duplication rate or score is calculated for each
        provided path to assess the amount of redudant data
        in a given location. 
        
        Please note that this sub command may take a while to
        process depending on the number/size of files existing
        in a given subtree. To assess the number/size of files
        that exist in a provided directory, you can run the 
        'spacesaver ls' sub command. 
        
        For more information about the 'ls' sub command, please
        reference its usage section: 'spacesaver ls -h'.

        """)

    # Display example usage in epilog
    df_epilog = textwrap.dedent("""\
        example:
          # Assess raw data disk space usage
          $ spacesaver df /data/CCBR/rawdata/ccbr123/

        version:
          {}
        """.format(__version__))

    # Supressing help message of required args to overcome no sub-parser named groups
    subparser_df = subparsers.add_parser('df',
        help = 'Report duplication rate and disk space usage',
        usage = argparse.SUPPRESS,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description = required_df_options,
        epilog = df_epilog
    )

    # Positional arguments
    subparser_df.add_argument('DIRECTORY', 
        # Check if the file exists and if it is readable
        type = lambda file: permissions(parser, file, os.R_OK),
        nargs = '+',
        help = argparse.SUPPRESS
    )

    # Sanity check for user command line arguments 
    if len(sys.argv) < 2:
        parser.error("""\n\t └── Fatal: failed to provide a valid sub command to spacesaver!
             Please run 'spacespacer  -h' to view more information about its correct usage.""".format(
                sys.argv[0])
        )

    # Define handlers for each sub-parser
    subparser_ls.set_defaults(func = ls)
    subparser_df.set_defaults(func = df)

    # Parse command-line args
    args = parser.parse_args()
    return args


def main():

    # Display version information
    if '--version' not in sys.argv:
        print('Spacesaver ({})\n'.format(__version__))

    # Collect args for sub-command
    args = parsed_arguments()

    # Mediator to call sub-command's set handler function
    args.func(args)


if __name__ == '__main__':
    main()
